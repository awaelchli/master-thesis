"""
Plots for the experiment DeepVO on KITTI, overlap and dropout
"""
import matplotlib.pyplot as plt
import numpy as np

# the width of the bars
width = 0.5
linetype = 'bo-'
show = False


#################################################################################################
# 3-Way comparison: incremental VIPER (eul), incremental VIPER (quaternion), infinite VIPER (eul)
#################################################################################################

# Rotation

t = np.arange(0, 259, 1)
# Rotation incremental euler reset
r1 = np.array([0.0, 0.908534, 1.08588, 1.31737, 1.46841, 1.58948, 1.76114, 1.92987, 1.97907, 2.10001, 2.25836, 2.41666, 2.5528, 2.71525, 2.87016, 2.97484, 3.05579, 3.22051, 3.26127, 3.39709, 3.55858, 3.5788, 3.6699, 3.68325, 3.71619, 3.81016, 3.90666, 3.9731, 3.96414, 3.97589, 4.06084, 4.04051, 4.12003, 4.23198, 4.35116, 4.48049, 4.56512, 4.63158, 4.72078, 4.81909, 4.90634, 4.92892, 5.01896, 5.08031, 5.11207, 5.22444, 5.30371, 5.37659, 5.40298, 5.44715, 5.36811, 5.46413, 5.51215, 5.56839, 5.61946, 5.65128, 5.67988, 5.72516, 5.7595, 5.84947, 5.87034, 5.92822, 6.02631, 6.02287, 6.04173, 6.08055, 6.08427, 6.12385, 6.16844, 6.14513, 6.18918, 6.26529, 6.30837, 6.33362, 6.31695, 6.30857, 6.39499, 6.43781, 6.48128, 6.54562, 6.59057, 6.60562, 6.65344, 6.71679, 6.76017, 6.83057, 6.90559, 6.91207, 7.03095, 7.10364, 7.14838, 7.21838, 7.29108, 7.36856, 7.45752, 7.51707, 7.53327, 7.59526, 7.69041, 7.71368, 7.69514, 7.68197, 7.72422, 7.85565, 7.91536, 7.99884, 8.00652, 8.06876, 8.14991, 8.17675, 8.25012, 8.28206, 8.32061, 8.38387, 8.45374, 8.46931, 8.5433, 8.60224, 8.64475, 8.664, 8.67726, 8.73303, 8.73055, 8.81092, 8.89785, 8.93747, 9.01293, 8.99471, 8.93723, 8.96562, 9.06712, 8.99656, 9.07032, 9.11933, 9.22832, 9.31707, 9.5205, 9.47923, 9.5503, 9.6186, 9.68496, 9.72592, 9.77718, 9.84147, 9.83117, 9.89513, 9.94829, 10.0238, 10.0441, 10.0918, 10.1497, 10.0334, 10.0879, 10.1612, 10.2413, 10.3108, 10.1773, 10.2315, 10.2978, 10.3434, 10.4046, 10.4772, 10.408, 10.4358, 10.3465, 10.4212, 10.4259, 10.4201, 10.4514, 10.5162, 10.5719, 10.5956, 10.6529, 10.6838, 10.6335, 10.6814, 10.4083, 10.4525, 10.5045, 10.5897, 10.7899, 10.8598, 10.8977, 10.9575, 10.9899, 10.8923, 10.935, 10.981, 11.0406, 11.1288, 11.0111, 11.0691, 11.1376, 11.3782, 10.779, 10.8017, 10.5587, 10.5947, 10.6173, 10.6445, 10.6772, 10.3288, 10.3339, 10.4131, 9.90627, 9.9372, 9.99093, 9.83532, 9.88825, 9.91677, 10.0144, 10.055, 10.0912, 10.1331, 10.1926, 10.2081, 10.2546, 10.2921, 9.97179, 9.998, 10.0375, 10.0924, 10.1188, 10.1338, 10.2006, 10.2203, 10.304, 10.3162, 10.3616, 10.3042, 10.3171, 10.3801, 10.3801, 10.2074, 11.1829, 11.2162, 11.2292, 11.4616, 11.4766, 11.6111, 12.3901, 11.6584, 11.7276, 11.7276, 10.0554, 10.1159, 10.1159, 10.1159, 10.1013, 10.1013, 10.1671, 10.1671, 10.1671, 10.2049, 10.2049, 10.2049, 10.2098, 10.2098, 10.2098])

# Rotation incremental euler keep
r2 = np.array([0.0, 2.7385, 2.99046, 3.13608, 3.21429, 3.27489, 3.3379, 3.41563, 3.46558, 3.54523, 3.63549, 3.73745, 3.81904, 3.9188, 4.01538, 4.10344, 4.205, 4.35959, 4.38416, 4.51225, 4.63389, 4.65906, 4.72509, 4.71112, 4.758, 4.8236, 4.90895, 4.93898, 4.91448, 4.85898, 4.93745, 4.87513, 4.91058, 4.99597, 5.09106, 5.18679, 5.24999, 5.3051, 5.38535, 5.4564, 5.5179, 5.56795, 5.66526, 5.74097, 5.77541, 5.84945, 5.91755, 5.98839, 6.02232, 6.06629, 6.01365, 6.06685, 6.10443, 6.16329, 6.18159, 6.20566, 6.25481, 6.26342, 6.3226, 6.36955, 6.34006, 6.34223, 6.41815, 6.34881, 6.39991, 6.40755, 6.41151, 6.4125, 6.42797, 6.38735, 6.41414, 6.45776, 6.45809, 6.46942, 6.45813, 6.39276, 6.46042, 6.5462, 6.57327, 6.61479, 6.70065, 6.77422, 6.82618, 6.86294, 6.90987, 6.9626, 7.01371, 7.0336, 7.1011, 7.12352, 7.17549, 7.23546, 7.30891, 7.37494, 7.43723, 7.46593, 7.4947, 7.45532, 7.47557, 7.48627, 7.52258, 7.51791, 7.56867, 7.52532, 7.57573, 7.63195, 7.59503, 7.60004, 7.62197, 7.54371, 7.58513, 7.60846, 7.57148, 7.60429, 7.58499, 7.70138, 7.72126, 7.78102, 7.74149, 7.72573, 7.73426, 7.71579, 7.64699, 7.70101, 7.71379, 7.80271, 7.85043, 7.89246, 7.7317, 7.64771, 7.65276, 7.59262, 7.62862, 7.65864, 7.68228, 7.67563, 7.74655, 7.72126, 7.72369, 7.75345, 7.7645, 7.59568, 7.62072, 7.65141, 7.78522, 7.79742, 7.82545, 7.85584, 7.73763, 7.7551, 7.77672, 8.09281, 8.11973, 8.27357, 8.30438, 8.32134, 8.32212, 8.36291, 8.37605, 8.41529, 8.43866, 8.4852, 8.46078, 8.39823, 8.2267, 8.2402, 8.15544, 8.12385, 8.14412, 8.16526, 8.18587, 8.18507, 8.22178, 8.23811, 8.22447, 8.25341, 8.13096, 8.15301, 8.18284, 8.21314, 8.21929, 8.26481, 8.27446, 8.30974, 8.33154, 8.16805, 8.1952, 8.23164, 8.2796, 8.32391, 8.22606, 8.25506, 8.28436, 7.78807, 7.56345, 7.57563, 7.93605, 7.96895, 7.99822, 8.02918, 8.05064, 8.22031, 8.23811, 8.33862, 8.59123, 8.63254, 8.67044, 8.55123, 8.58091, 8.59373, 8.66361, 8.66655, 8.70986, 8.76722, 8.82213, 8.84052, 8.89143, 8.90399, 8.95147, 8.97047, 8.98387, 9.0221, 9.03309, 9.0671, 9.12071, 9.11537, 9.20353, 9.21257, 9.25216, 8.97242, 8.97869, 9.03084, 9.03084, 8.57381, 7.29157, 7.29207, 7.28936, 7.4589, 7.46255, 7.53328, 8.37604, 9.19016, 9.28931, 9.28931, 8.72987, 8.72528, 8.72528, 8.72528, 8.74754, 8.74754, 8.75899, 8.75899, 8.75899, 8.71406, 8.71406, 8.71406, 8.71298, 8.71298, 8.71298])

# Rotation incremental quaternion reset
r3 = np.array([0.0, 1.34316, 1.68568, 2.00972, 2.22709, 2.33242, 2.54053, 2.75041, 2.89384, 3.1226, 3.33101, 3.51743, 3.69312, 3.88366, 4.05707, 4.20033, 4.30283, 4.50406, 4.62866, 4.80927, 5.0185, 5.17083, 5.33461, 5.35606, 5.36022, 5.4474, 5.58012, 5.65735, 5.62897, 5.60016, 5.70902, 5.63759, 5.73862, 5.83672, 5.9491, 6.06729, 6.15696, 6.27285, 6.37701, 6.51231, 6.56971, 6.67794, 6.7451, 6.82146, 6.87836, 6.98072, 7.03565, 7.15571, 7.18843, 7.23847, 7.17482, 7.24266, 7.34732, 7.42587, 7.51123, 7.53821, 7.58892, 7.67357, 7.71489, 7.80676, 7.84607, 7.90277, 8.0201, 8.07153, 8.11885, 8.23532, 8.29879, 8.29679, 8.30836, 8.29549, 8.38268, 8.49132, 8.51145, 8.4736, 8.55659, 8.61834, 8.72338, 8.69734, 8.78539, 8.86116, 8.9015, 8.94142, 8.92223, 9.03561, 9.10409, 9.16987, 9.20598, 9.31118, 9.40423, 9.47723, 9.51875, 9.51922, 9.66651, 9.7318, 9.83443, 9.97253, 10.0764, 10.0095, 10.0683, 10.1419, 10.1481, 10.1834, 10.1957, 10.1783, 10.2465, 10.336, 10.4731, 10.4329, 10.5395, 10.5186, 10.5774, 10.5712, 10.6291, 10.7003, 10.8409, 10.5931, 10.749, 10.8257, 10.6832, 10.3777, 10.4824, 10.5489, 10.5902, 10.698, 10.8043, 10.9205, 11.0042, 11.132, 11.2964, 11.3614, 11.4906, 11.4555, 11.5402, 11.5887, 11.8129, 11.9396, 11.9862, 12.1749, 12.3816, 12.4086, 12.5486, 12.5957, 12.6215, 12.6514, 12.5131, 12.4804, 12.5067, 12.5134, 12.8163, 12.8723, 12.889, 12.8001, 12.8207, 13.1127, 13.1775, 13.2998, 13.2574, 13.4099, 13.4567, 13.5532, 13.6057, 13.6765, 13.8488, 13.7902, 13.7317, 13.7539, 13.543, 13.3743, 13.4056, 13.4946, 13.5648, 13.6043, 13.6397, 13.6946, 13.53, 13.6063, 13.816, 13.8793, 13.9636, 14.068, 14.1212, 14.2066, 14.2012, 14.2733, 14.3172, 14.4261, 14.4544, 14.5021, 14.4804, 14.502, 15.1517, 15.1993, 15.2687, 15.5345, 15.0374, 15.0601, 15.401, 15.456, 15.5396, 15.5705, 15.5938, 15.9556, 15.9956, 15.7148, 14.979, 14.9434, 15.0405, 14.9609, 15.0323, 15.0779, 15.0825, 15.1698, 15.2548, 15.2641, 15.3764, 15.3876, 15.3756, 15.4569, 15.6086, 15.6364, 15.6687, 15.7077, 15.7474, 15.79, 15.8271, 15.8756, 15.9302, 15.9811, 16.0587, 15.5178, 15.5135, 15.5934, 15.5934, 14.6742, 15.1654, 15.1307, 15.1239, 12.5949, 12.6805, 12.7313, 9.42174, 9.15685, 9.39124, 9.39124, 13.4484, 13.7005, 13.7005, 13.7005, 13.9656, 13.9656, 14.1094, 14.1094, 14.1094, 14.6942, 14.6942, 14.6942, 14.8254, 14.8254, 14.8254])

fig, ax1 = plt.subplots()
ax1.plot(t, r1, 'r', label='Euler + Reset')
ax1.plot(t, r2, 'g', label='Euler + Keep')
ax1.plot(t, r3, 'b', label='Quaternion + Reset')
ax1.set_xlabel('Distance [m]')
ax1.set_ylabel('Average Rotation Error [deg]')
plt.legend(loc=0)

plt.grid(True)
fig.tight_layout()

plt.savefig('./deepvo-VIPER/rotation-comparison-Euler-Quaternion-Reset-or-Keep-Hidden.pdf', bbox_inches='tight')


if show:
    plt.show()

# Translation

t = np.arange(0, 259, 1)
# Translation incremental euler reset
t1 = np.array([0.0, 0.219722, 0.311389, 0.398354, 0.466594, 0.531566, 0.5909, 0.653075, 0.709878, 0.768878, 0.833731, 0.899448, 0.961777, 1.04131, 1.10439, 1.15793, 1.21178, 1.27694, 1.31462, 1.37728, 1.43719, 1.48694, 1.53249, 1.59518, 1.63075, 1.68642, 1.75092, 1.82813, 1.88695, 1.93808, 2.0171, 2.06269, 2.13042, 2.19857, 2.26828, 2.33535, 2.4057, 2.47335, 2.54573, 2.61375, 2.67418, 2.7432, 2.81345, 2.88777, 2.9488, 3.03807, 3.11368, 3.1904, 3.26095, 3.31789, 3.33366, 3.41175, 3.49116, 3.5707, 3.65861, 3.73707, 3.80098, 3.86908, 3.94776, 4.0277, 4.07111, 4.1653, 4.26169, 4.34485, 4.42481, 4.45613, 4.49449, 4.54785, 4.6376, 4.76125, 4.82087, 4.91145, 5.00904, 5.11378, 5.17614, 5.28003, 5.3808, 5.50206, 5.6205, 5.68236, 5.77881, 5.87151, 5.97649, 6.09184, 6.2099, 6.30916, 6.39092, 6.48621, 6.58169, 6.70599, 6.812, 6.91885, 7.02709, 7.12865, 7.2672, 7.37348, 7.44544, 7.59551, 7.68801, 7.78517, 7.90899, 8.01445, 8.11543, 8.35983, 8.46604, 8.61184, 8.63247, 8.78255, 8.94512, 9.07001, 9.19929, 9.32432, 9.42558, 9.5386, 9.68096, 9.71028, 9.79013, 9.96699, 10.1134, 10.2129, 10.3374, 10.5465, 10.5949, 10.7647, 10.9108, 11.0585, 11.2168, 11.2618, 11.2839, 11.3964, 11.5468, 11.7105, 11.8471, 11.9589, 12.277, 12.4536, 12.8568, 12.9617, 13.0973, 13.2433, 13.5043, 13.6501, 13.7894, 13.9486, 14.0271, 14.2074, 14.3185, 14.5398, 14.5894, 14.7953, 14.9085, 14.9916, 15.1542, 15.4421, 15.634, 15.7544, 15.6965, 15.8635, 15.9952, 16.1454, 16.2956, 16.4766, 16.2916, 16.4514, 16.5648, 16.7929, 16.8701, 17.0621, 17.1858, 17.3584, 17.5161, 17.7104, 17.8935, 17.9883, 18.3815, 18.4872, 18.1628, 18.2751, 18.4471, 18.6168, 18.7767, 18.94, 19.1172, 19.2972, 19.4189, 19.3869, 19.5107, 19.6952, 19.7989, 20.0362, 20.0876, 20.2322, 20.4236, 20.0221, 19.0737, 19.1461, 18.6907, 18.804, 18.9358, 19.1529, 19.223, 18.3904, 18.5138, 18.809, 17.6121, 17.7341, 17.9236, 17.7456, 17.9285, 17.9893, 18.2065, 18.3373, 18.4762, 18.6438, 18.8355, 18.9157, 19.1568, 19.2848, 19.1773, 19.2305, 19.4035, 19.6271, 19.7171, 19.8495, 20.0811, 20.171, 20.4926, 20.5378, 20.7767, 21.3246, 21.3756, 21.7507, 21.7507, 21.9531, 23.9506, 24.0982, 24.1759, 25.4807, 25.5733, 25.9067, 26.4474, 23.9996, 24.4929, 24.4929, 18.5605, 18.9709, 18.9709, 18.9709, 19.3903, 19.3903, 19.8202, 19.8202, 19.8202, 20.266, 20.266, 20.266, 20.6944, 20.6944, 20.6944])

# Translation incremental euler keep
t2 = np.array([0.0, 0.411284, 0.507079, 0.612979, 0.701537, 0.78745, 0.883431, 0.986716, 1.08941, 1.19946, 1.30588, 1.40655, 1.50498, 1.62621, 1.73248, 1.83655, 1.96013, 2.07118, 2.18359, 2.31026, 2.41493, 2.52839, 2.63496, 2.74993, 2.87423, 3.01887, 3.12777, 3.2564, 3.37066, 3.4777, 3.60952, 3.69226, 3.80827, 3.9115, 4.0269, 4.13359, 4.26637, 4.37093, 4.49102, 4.61556, 4.73789, 4.86921, 5.00306, 5.12437, 5.2485, 5.38052, 5.508, 5.63876, 5.79898, 5.96966, 6.10198, 6.21365, 6.36094, 6.497, 6.64619, 6.78733, 6.97271, 7.0863, 7.25572, 7.41383, 7.48697, 7.5966, 7.7412, 7.89755, 7.97201, 8.09295, 8.30135, 8.44647, 8.578, 8.74151, 8.83394, 8.98926, 9.13177, 9.27803, 9.38247, 9.55558, 9.69077, 9.91075, 10.0791, 10.1542, 10.3499, 10.5943, 10.7618, 10.9254, 11.0939, 11.2762, 11.4366, 11.578, 11.7598, 11.9576, 12.1351, 12.3573, 12.6174, 12.7649, 12.9722, 13.1193, 13.4114, 13.6204, 13.8237, 14.0143, 14.2702, 14.588, 14.7169, 14.8409, 14.9778, 15.1589, 15.2619, 15.6188, 15.8135, 15.9403, 16.0979, 16.2835, 16.3741, 16.525, 16.7093, 16.9682, 17.0835, 17.3491, 17.4444, 17.5972, 17.703, 17.9486, 18.0368, 18.2181, 18.4074, 18.6716, 18.8417, 19.1051, 19.4635, 19.4588, 19.522, 19.4968, 19.6158, 19.7424, 20.1484, 20.4538, 20.675, 21.0346, 21.3897, 21.5466, 21.8124, 21.8795, 22.015, 22.1526, 22.4985, 22.6675, 22.7887, 22.9729, 22.978, 23.1784, 23.2792, 24.448, 24.6204, 25.3421, 25.5679, 25.6569, 26.1101, 26.2651, 26.375, 26.5523, 26.6627, 26.8594, 27.1385, 27.0304, 27.0718, 27.2648, 27.3491, 27.5544, 27.6689, 27.8257, 27.9434, 28.1707, 28.3418, 28.4256, 28.904, 28.992, 29.3979, 29.5149, 29.6766, 29.8351, 30.0969, 30.2324, 30.3985, 30.5409, 30.6541, 30.8764, 30.963, 31.1082, 31.22, 31.4159, 31.4406, 31.537, 31.7198, 30.7132, 32.5056, 32.5542, 32.4421, 32.566, 32.6814, 32.8209, 32.8994, 33.0451, 33.2047, 33.9644, 34.4724, 34.6337, 34.7311, 35.2505, 35.3461, 35.416, 35.629, 35.722, 35.8797, 36.0262, 36.1505, 36.2358, 36.4296, 36.53, 37.6446, 37.6938, 37.8393, 38.0572, 38.0733, 38.2721, 38.4698, 38.5249, 38.8448, 38.8514, 39.1177, 40.0285, 40.0887, 40.4494, 40.4494, 41.6869, 39.9679, 40.0671, 40.1613, 41.6979, 41.8008, 42.085, 40.5616, 46.2809, 46.817, 46.817, 48.4149, 48.9471, 48.9471, 48.9471, 49.4336, 49.4336, 49.9416, 49.9416, 49.9416, 50.4269, 50.4269, 50.4269, 50.9539, 50.9539, 50.9539])

# Translation incremental quaternion reset
t3 = np.array([0.0, 0.250705, 0.343839, 0.435753, 0.514306, 0.568791, 0.637857, 0.70627, 0.755174, 0.82054, 0.89781, 0.97365, 1.04877, 1.13675, 1.20976, 1.25601, 1.31238, 1.39584, 1.45221, 1.53227, 1.60712, 1.67135, 1.74081, 1.8203, 1.8708, 1.93269, 2.00933, 2.0951, 2.15002, 2.20687, 2.30131, 2.35326, 2.43778, 2.52026, 2.60506, 2.69096, 2.77625, 2.86836, 2.96296, 3.05732, 3.1326, 3.23738, 3.33197, 3.40987, 3.49663, 3.60424, 3.69833, 3.8009, 3.88425, 3.96773, 4.00288, 4.12306, 4.25347, 4.34455, 4.46654, 4.55202, 4.67196, 4.78806, 4.90005, 5.00745, 5.0813, 5.19196, 5.31886, 5.43231, 5.55874, 5.59887, 5.68986, 5.76569, 5.85765, 5.97369, 6.07738, 6.20324, 6.23448, 6.32118, 6.42796, 6.53108, 6.65322, 6.73412, 6.90215, 7.0108, 7.09368, 7.21473, 7.27408, 7.41745, 7.57336, 7.71066, 7.75098, 7.87932, 7.98542, 8.14503, 8.28798, 8.36419, 8.65046, 8.77723, 8.94684, 9.12149, 9.24424, 9.25573, 9.32202, 9.4731, 9.60557, 9.76958, 9.90033, 10.0316, 10.147, 10.2995, 10.3961, 10.5446, 10.727, 10.8333, 10.9684, 11.0591, 11.2637, 11.3785, 11.5964, 11.5257, 11.6214, 11.7828, 11.5488, 11.6282, 11.7971, 12.0, 12.1364, 12.2962, 12.4845, 12.6344, 12.8051, 13.0146, 13.4046, 13.482, 13.6647, 13.4764, 13.6244, 13.7293, 14.2482, 14.5657, 14.9804, 15.3352, 15.6229, 15.805, 16.2332, 16.5045, 16.6738, 16.8451, 16.9166, 17.1018, 17.2369, 17.455, 17.7755, 17.9726, 18.1053, 18.0241, 18.2042, 18.3668, 18.5886, 18.7085, 18.594, 18.7528, 18.8846, 19.0476, 19.1919, 19.3642, 19.5595, 19.6169, 19.5935, 19.7648, 19.7367, 19.3221, 19.4195, 19.5933, 19.7399, 19.5201, 19.6932, 19.7703, 19.932, 20.0339, 20.4637, 20.5784, 20.7455, 20.9252, 20.9094, 21.0923, 21.257, 21.4628, 21.5819, 22.0604, 22.1768, 22.3822, 22.4989, 22.7137, 23.5195, 23.6542, 23.8844, 23.9109, 23.6286, 23.6799, 22.7991, 22.8914, 23.0835, 23.2948, 23.3409, 22.8223, 22.9172, 22.692, 21.9927, 22.1283, 22.3673, 23.9233, 24.147, 24.212, 24.4709, 24.633, 24.8343, 25.0148, 25.2537, 25.3201, 25.6029, 25.7398, 24.847, 24.9216, 25.1129, 25.3719, 25.4717, 25.6149, 25.8693, 26.0, 26.3375, 26.4121, 26.6715, 25.5315, 25.5727, 25.9616, 25.9616, 25.5025, 24.9918, 25.0908, 25.1996, 20.5483, 20.6387, 20.8832, 22.8228, 22.4785, 22.9223, 22.9223, 26.0998, 26.7198, 26.7198, 26.7198, 27.3523, 27.3523, 27.9569, 27.9569, 27.9569, 28.5972, 28.5972, 28.5972, 29.2762, 29.2762, 29.2762])

fig, ax1 = plt.subplots()
ax1.plot(t, t1, 'r', label='Euler + Reset')
ax1.plot(t, t2, 'g', label='Euler + Keep')
ax1.plot(t, t3, 'b', label='Quaternion + Reset')
ax1.set_xlabel('Distance [m]')
ax1.set_ylabel('Average Translation Error [m]')
plt.legend(loc=0)

plt.grid(True)
fig.tight_layout()

plt.savefig('./deepvo-VIPER/translation-comparison-Euler-Quaternion-Reset-or-Keep-Hidden.pdf', bbox_inches='tight')


if show:
    plt.show()


#################################################
# Convergence speed: Keep hidden vs. reset hidden
#################################################

with open('./deepvo-VIPER/training_keep.log') as f:
    lines_keep = f.readlines()

with open('./deepvo-VIPER/training_reset.log') as f:
    lines_reset = f.readlines()



lines_keep = lines_keep[1:]
lines_reset = lines_reset[1:]


train_keep = [float(line.split(',')[1]) for line in lines_keep]
valid_keep = [float(line.split(',')[2]) for line in lines_keep]

train_reset = [float(line.split(',')[1]) for line in lines_reset]
valid_reset = [float(line.split(',')[2]) for line in lines_reset]

print(train_keep)
print(valid_keep)


epochs = np.arange(0, 100, 1)
# Training loss keep
tk = np.array(train_keep[:100])
# Validation loss keep
vk = np.array(valid_keep[:100])

# Training loss reset
tr = np.array(train_reset[:100])
# Validation loss reset
vr = np.array(valid_reset[:100])

fig, ax1 = plt.subplots()
ax1.plot(epochs, tk, 'g', label='Keep')
ax1.plot(epochs, vk, 'g:')
ax1.plot(epochs, tr, 'b', label='Reset')
ax1.plot(epochs, vr, 'b:')
ax1.set_xlabel('Epoch')
ax1.set_ylabel('Training/Validation Loss')
plt.legend(loc=1)

plt.grid(True)
fig.tight_layout()

plt.savefig('./deepvo-VIPER/convergence-speed-keep-vs-reset.pdf', bbox_inches='tight')