"""
Plots for the experiment DeepVO on KITTI, overlap and dropout
"""
import matplotlib.pyplot as plt
import numpy as np

# the width of the bars
width = 0.5
linetype = 'bo-'
show = False



############
# Overlap 80
############
t = np.arange(0, 126, 1)
rot = np.array([0.683479, 1.10464, 0.986356, 1.24191, 1.19934, 1.21844, 1.17596, 1.23722, 1.27877, 1.44469, 1.62718, 1.6688, 1.83837, 1.83302, 1.89373, 2.01958, 1.9657, 2.0558, 2.38709, 2.57774, 2.47287, 2.48771, 2.44931, 2.53691, 2.44185, 2.52642, 2.62291, 2.80826, 2.91138, 3.07516, 3.12245, 3.09815, 3.07763, 3.1422, 3.27095, 3.57668, 3.52844, 3.44501, 3.50239, 3.50611, 3.70961, 3.71377, 3.83277, 3.8748, 3.99532, 4.06275, 4.14344, 4.18222, 4.25682, 4.13801, 3.87036, 3.80123, 3.8421, 3.92255, 4.005, 4.06492, 4.21233, 4.28566, 4.52915, 4.9106, 5.14629, 5.47455, 5.66499, 5.79517, 5.85484, 5.81707, 5.8205, 5.5197, 5.71439, 6.03878, 6.3198, 6.53012, 4.47563, 3.91457, 3.73425, 3.86569, 4.04054, 4.00585, 3.7345, 4.41803, 5.0676, 6.12438, 6.61801, 7.89644, 8.6184, 10.2209, 10.9114, 11.4795, 12.0382, 14.6736, 14.9484, 15.1142, 15.5032, 15.7666, 16.0159, 16.3321, 16.7806, 6.74616, 6.74616, 6.25188, 5.93234, 5.93234, 5.621, 4.84299, 4.84299, 4.03546, 3.15988, 3.15988, 2.75605, 2.20709, 2.20709, 2.27692, 1.78619, 1.78619, 1.59446, 1.59446, 1.40889, 1.74675, 1.74675, 1.81531, 1.80624, 1.80624, 1.90372, 2.78938, 2.78938, 4.41526])
trans = np.array([0.103754, 0.225857, 0.399287, 0.506731, 0.572999, 0.629034, 0.66986, 0.718172, 0.824851, 0.851484, 0.919804, 0.96517, 1.0235, 1.12352, 1.16439, 1.28151, 1.318, 1.41297, 1.27507, 1.31963, 1.33549, 1.34641, 1.36083, 1.40306, 1.43738, 1.47867, 1.56458, 1.63956, 1.72455, 1.81267, 1.92626, 1.99046, 2.06761, 2.09271, 2.16548, 2.3202, 2.42753, 2.48306, 2.55456, 2.63618, 2.68928, 2.73335, 2.79097, 2.83182, 2.90694, 2.94404, 2.98833, 3.04481, 3.07525, 3.0909, 3.16398, 3.23787, 3.31999, 3.39978, 3.48046, 3.59931, 3.73313, 3.85071, 4.01996, 4.18689, 4.13747, 4.26857, 4.37518, 4.51246, 4.65611, 4.75723, 4.88993, 5.05537, 5.2287, 5.37635, 5.54332, 5.72095, 4.49797, 4.55808, 4.65055, 4.77222, 4.91362, 4.984, 4.9363, 4.6995, 4.75481, 4.60521, 4.71818, 4.82633, 4.91682, 5.0797, 5.25314, 5.38672, 5.51673, 3.27457, 3.47182, 3.58092, 3.86996, 4.07032, 4.21907, 4.39547, 4.59757, 5.39676, 5.39676, 5.48554, 5.5461, 5.5461, 5.63703, 5.76151, 5.76151, 5.86673, 5.98418, 5.98418, 6.06692, 6.18675, 6.18675, 6.28937, 6.42257, 6.42257, 6.57463, 6.57463, 6.6916, 6.87642, 6.87642, 7.1112, 7.42622, 7.42622, 7.84138, 8.31835, 8.31835, 8.90924])

fig, ax1 = plt.subplots()

ax1.plot(t, rot, 'b-')
ax1.set_xlabel('Distance [m]')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('Average Relative Rotation Error [deg]', color='b')
ax1.tick_params('y', colors='b')

plt.grid(True)

ax2 = ax1.twinx()
ax2.plot(t, trans, 'r-')
ax2.set_ylabel('Average Translation Error [m]', color='r')
ax2.tick_params('y', colors='r')

fig.tight_layout()

plt.savefig('./deepvo-KITTI/relative-rotation-and-translation-error-along-path-overlap80.pdf', bbox_inches='tight')


if show:
    plt.show()



##################
# Growing Sequence (test100epoch80)
##################

t = np.arange(0, 126, 1)
rot1 = np.array([0.683479, 1.10464, 0.986356, 1.24191, 1.19934, 1.21844, 1.17596, 1.23722, 1.27877, 1.44469, 1.62718, 1.6688, 1.83837, 1.83302, 1.89373, 2.01958, 1.9657, 2.0558, 2.38709, 2.57774, 2.47287, 2.48771, 2.44931, 2.53691, 2.44185, 2.52642, 2.62291, 2.80826, 2.91138, 3.07516, 3.12245, 3.09815, 3.07763, 3.1422, 3.27095, 3.57668, 3.52844, 3.44501, 3.50239, 3.50611, 3.70961, 3.71377, 3.83277, 3.8748, 3.99532, 4.06275, 4.14344, 4.18222, 4.25682, 4.13801, 3.87036, 3.80123, 3.8421, 3.92255, 4.005, 4.06492, 4.21233, 4.28566, 4.52915, 4.9106, 5.14629, 5.47455, 5.66499, 5.79517, 5.85484, 5.81707, 5.8205, 5.5197, 5.71439, 6.03878, 6.3198, 6.53012, 4.47563, 3.91457, 3.73425, 3.86569, 4.04054, 4.00585, 3.7345, 4.41803, 5.0676, 6.12438, 6.61801, 7.89644, 8.6184, 10.2209, 10.9114, 11.4795, 12.0382, 14.6736, 14.9484, 15.1142, 15.5032, 15.7666, 16.0159, 16.3321, 16.7806, 6.74616, 6.74616, 6.25188, 5.93234, 5.93234, 5.621, 4.84299, 4.84299, 4.03546, 3.15988, 3.15988, 2.75605, 2.20709, 2.20709, 2.27692, 1.78619, 1.78619, 1.59446, 1.59446, 1.40889, 1.74675, 1.74675, 1.81531, 1.80624, 1.80624, 1.90372, 2.78938, 2.78938, 4.41526])

rot = np.array([0.308356, 0.421085, 0.56549, 0.690525, 0.981283, 1.21662, 1.25125, 1.36791, 1.53931, 1.54962, 1.49521, 1.52935, 1.54024, 1.55381, 1.74367, 1.79615, 1.76333, 1.89889, 2.03596, 2.05706, 2.07476, 2.10596, 2.0611, 2.13285, 2.16033, 2.30057, 2.39844, 2.49351, 2.57388, 2.76937, 2.89072, 3.11885, 3.30037, 3.39469, 3.54783, 3.8655, 3.92001, 3.95749, 4.11397, 4.30942, 4.26123, 4.19473, 4.19032, 4.28969, 4.34181, 4.39432, 4.41764, 4.45687, 4.47219, 4.67255, 4.93372, 5.07177, 5.17973, 5.18415, 5.24712, 5.2004, 5.32599, 5.48135, 5.59123, 5.61315, 6.23192, 6.38686, 6.41239, 6.58408, 6.74867, 6.91472, 6.95611, 7.07575, 7.18121, 7.33543, 7.58207, 7.57869, 2.43145, 2.63605, 3.07504, 3.50136, 4.02306, 4.61496, 5.45201, 6.31601, 7.16144, 8.88107, 9.15609, 9.43085, 9.83362, 10.3005, 10.5772, 11.0053, 11.5229, 14.776, 15.0923, 15.2582, 15.9808, 16.5591, 17.4827, 18.0098, 18.8269, 6.29544, 6.29544, 6.60123, 7.86197, 7.86197, 8.60715, 8.92443, 8.92443, 9.37719, 9.88425, 9.88425, 11.2441, 11.3547, 11.3547, 11.8651, 12.2443, 12.2443, 12.5672, 12.5672, 13.1854, 13.8092, 13.8092, 14.8168, 15.3256, 15.3256, 15.7229, 16.686, 16.686, 17.2336])

trans1 = np.array([0.103754, 0.225857, 0.399287, 0.506731, 0.572999, 0.629034, 0.66986, 0.718172, 0.824851, 0.851484, 0.919804, 0.96517, 1.0235, 1.12352, 1.16439, 1.28151, 1.318, 1.41297, 1.27507, 1.31963, 1.33549, 1.34641, 1.36083, 1.40306, 1.43738, 1.47867, 1.56458, 1.63956, 1.72455, 1.81267, 1.92626, 1.99046, 2.06761, 2.09271, 2.16548, 2.3202, 2.42753, 2.48306, 2.55456, 2.63618, 2.68928, 2.73335, 2.79097, 2.83182, 2.90694, 2.94404, 2.98833, 3.04481, 3.07525, 3.0909, 3.16398, 3.23787, 3.31999, 3.39978, 3.48046, 3.59931, 3.73313, 3.85071, 4.01996, 4.18689, 4.13747, 4.26857, 4.37518, 4.51246, 4.65611, 4.75723, 4.88993, 5.05537, 5.2287, 5.37635, 5.54332, 5.72095, 4.49797, 4.55808, 4.65055, 4.77222, 4.91362, 4.984, 4.9363, 4.6995, 4.75481, 4.60521, 4.71818, 4.82633, 4.91682, 5.0797, 5.25314, 5.38672, 5.51673, 3.27457, 3.47182, 3.58092, 3.86996, 4.07032, 4.21907, 4.39547, 4.59757, 5.39676, 5.39676, 5.48554, 5.5461, 5.5461, 5.63703, 5.76151, 5.76151, 5.86673, 5.98418, 5.98418, 6.06692, 6.18675, 6.18675, 6.28937, 6.42257, 6.42257, 6.57463, 6.57463, 6.6916, 6.87642, 6.87642, 7.1112, 7.42622, 7.42622, 7.84138, 8.31835, 8.31835, 8.90924])

trans = np.array([0.0996008, 0.184499, 0.322619, 0.389922, 0.482839, 0.553221, 0.630612, 0.675564, 0.724171, 0.741774, 0.789102, 0.832803, 0.861944, 0.974024, 1.07289, 1.24659, 1.34625, 1.48146, 1.24278, 1.31376, 1.34364, 1.35693, 1.422, 1.46652, 1.53488, 1.5794, 1.62795, 1.67539, 1.72715, 1.8146, 1.90235, 1.96436, 2.03579, 2.03188, 2.07321, 2.14337, 2.21024, 2.24363, 2.33686, 2.42141, 2.46006, 2.5011, 2.55384, 2.6199, 2.70388, 2.7975, 2.88456, 2.98185, 3.08393, 3.22472, 3.16308, 3.26505, 3.39863, 3.50538, 3.64779, 3.74689, 3.84823, 3.98414, 4.17127, 4.37349, 4.88771, 5.07261, 5.15695, 5.32048, 5.50967, 5.64794, 5.71138, 5.85717, 6.07258, 6.24257, 6.77281, 6.95536, 3.82946, 3.8817, 3.90854, 3.96322, 4.05107, 4.15769, 4.20842, 4.12008, 4.19945, 4.49118, 4.48263, 4.52594, 4.65262, 4.68407, 4.74021, 4.78221, 4.77106, 4.81224, 4.91324, 5.02931, 5.35043, 5.58002, 5.80963, 6.03464, 6.33026, 7.01752, 7.01752, 7.34998, 7.61299, 7.61299, 7.92843, 8.35036, 8.35036, 8.78537, 9.27978, 9.27978, 9.68308, 10.3108, 10.3108, 10.9309, 11.6366, 11.6366, 12.4494, 12.4494, 13.28, 14.1487, 14.1487, 15.0205, 16.0137, 16.0137, 17.0767, 18.0819, 18.0819, 19.1737
])

fig, ax1 = plt.subplots()

ax1.plot(t, rot1, 'b-')
ax1.plot(t, rot, 'b--')
ax1.set_xlabel('Distance [m]')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('Average Relative Rotation Error [deg]', color='b')
ax1.tick_params('y', colors='b')

plt.grid(True)

ax2 = ax1.twinx()
ax2.plot(t, trans1, 'r-')
ax2.plot(t, trans, 'r--')
ax2.set_ylabel('Average Translation Error [m]', color='r')
ax2.tick_params('y', colors='r')

fig.tight_layout()

plt.savefig('./deepvo-KITTI/relative-rotation-and-translation-error-along-path-grow-sequence-epoch80.pdf', bbox_inches='tight')


if show:
    plt.show()



##################
# Incremental Pose
##################

# Rotation (KITTI)

t = np.arange(0, 126, 1)
# Rotation incremental
r1 = np.array([0.0, 0.313548, 0.545402, 0.700394, 0.890315, 1.00254, 1.14877, 1.24031, 1.36328, 1.4824, 1.56995, 1.63176, 1.71832, 1.83371, 1.91261, 2.29483, 2.49487, 2.5799, 1.98345, 2.10979, 2.1932, 2.28239, 2.33019, 2.44686, 2.48276, 2.58779, 2.64208, 2.69823, 2.8011, 2.94317, 3.06135, 3.15515, 3.24395, 3.36094, 3.458, 3.57246, 3.71671, 3.80625, 3.91836, 4.01949, 4.10132, 4.19804, 4.29478, 4.37443, 4.46592, 4.53413, 4.66991, 4.76152, 4.86034, 4.9384, 4.61169, 4.68424, 4.80298, 4.97168, 5.14208, 5.29187, 5.46827, 5.62534, 5.78615, 5.97639, 5.95419, 6.05203, 6.22104, 6.29558, 6.36426, 6.43282, 6.47123, 6.52103, 6.57318, 6.62047, 6.56191, 6.47205, 6.38254, 6.30748, 6.35105, 6.39908, 6.40974, 6.59484, 6.86214, 6.37163, 6.59505, 6.86748, 6.87156, 6.90928, 6.98203, 6.96291, 7.01372, 7.04183, 7.00056, 6.56891, 6.58734, 6.62284, 6.79563, 6.88057, 6.81463, 6.78799, 6.75211, 6.40616, 6.40616, 6.41093, 6.4983, 6.4983, 6.57247, 6.55251, 6.55251, 6.65755, 6.64216, 6.64216, 6.72473, 6.81616, 6.81616, 6.89188, 7.0142, 7.0142, 7.13773, 7.13773, 7.2302, 7.30433, 7.30433, 7.33815, 7.53656, 7.53656, 7.70192, 7.86307, 7.86307, 7.95392])
# Rotation incremental dropout
r2 = np.array([0.0, 0.206887, 0.418196, 0.508748, 0.605269, 0.676236, 0.79739, 0.883554, 0.965267, 1.05296, 1.10821, 1.17218, 1.29841, 1.41147, 1.56858, 1.66158, 1.73193, 1.91774, 1.79558, 1.86461, 1.92752, 1.97796, 2.05861, 2.12004, 2.16759, 2.22068, 2.32324, 2.39331, 2.48002, 2.53324, 2.54062, 2.58932, 2.66419, 2.68148, 2.70081, 2.76628, 2.80211, 2.81716, 2.8258, 2.87802, 2.97733, 3.01143, 3.07913, 3.17177, 3.22977, 3.30724, 3.37141, 3.46814, 3.52281, 3.64462, 3.68417, 3.78003, 3.8308, 3.93385, 4.03476, 4.21799, 4.35679, 4.48105, 4.6916, 4.80241, 4.27917, 4.37362, 4.46761, 4.54908, 4.67682, 4.74516, 4.87521, 4.99889, 5.08536, 5.20767, 5.27128, 5.49366, 5.62033, 5.82857, 5.89867, 6.01386, 6.28291, 6.40566, 6.65113, 6.66582, 6.87166, 6.57615, 6.63077, 6.65971, 6.65975, 6.64708, 6.65169, 6.6751, 6.7141, 7.55274, 7.56573, 7.61139, 7.64693, 7.69803, 7.81046, 7.84067, 8.01268, 6.2142, 6.2142, 6.30652, 6.42584, 6.42584, 6.50849, 6.66521, 6.66521, 6.79275, 7.02024, 7.02024, 7.06858, 7.10539, 7.10539, 7.16314, 7.20209, 7.20209, 7.24381, 7.24381, 7.22249, 7.38443, 7.38443, 7.54566, 7.5465, 7.5465, 7.54504, 7.56255, 7.56255, 7.68544])
# Rotation incremental no LSTM
r3 = np.array([0.0, 0.327488, 0.717566, 0.936922, 1.11155, 1.19716, 1.28974, 1.41987, 1.53792, 1.68322, 1.74658, 1.77913, 1.76877, 1.76359, 1.84968, 1.99674, 1.96466, 1.94377, 1.92951, 2.00413, 2.06245, 2.05592, 2.04065, 2.10882, 2.18987, 2.24226, 2.29355, 2.34922, 2.3763, 2.39851, 2.43961, 2.45084, 2.4171, 2.4796, 2.50847, 2.53984, 2.58899, 2.64124, 2.6906, 2.71566, 2.72058, 2.76346, 2.81251, 2.79789, 2.83103, 2.85945, 2.86312, 2.8816, 2.91563, 2.96158, 3.01704, 3.01279, 3.06003, 3.12474, 3.21423, 3.28257, 3.30968, 3.36054, 3.46902, 3.55936, 3.44463, 3.50462, 3.57402, 3.60074, 3.63477, 3.63571, 3.56971, 3.54991, 3.54707, 3.5493, 3.42982, 3.55457, 3.039, 3.0396, 3.16044, 3.35094, 3.51219, 3.56382, 4.18383, 4.30065, 4.3214, 4.92914, 4.95511, 5.09347, 5.09731, 5.165, 5.22751, 5.30521, 5.27647, 5.11862, 5.15153, 5.10033, 5.04427, 5.0162, 5.0266, 5.01195, 5.03232, 5.02453, 5.02453, 5.01485, 4.95701, 4.95701, 5.07258, 5.11788, 5.11788, 5.09524, 5.24082, 5.24082, 5.30807, 5.12002, 5.12002, 5.04391, 4.94863, 4.94863, 4.75638, 4.75638, 4.59474, 4.6392, 4.6392, 4.6233, 4.54114, 4.54114, 4.49606, 4.40246, 4.40246, 4.60394])

fig, ax1 = plt.subplots()
ax1.plot(t, r1, 'r', label='No Dropout')
ax1.plot(t, r2, 'g', label='Dropout 0.5')
ax1.plot(t, r3, 'b', label='no LSTM')
ax1.set_xlabel('Distance [m]')
ax1.set_ylabel('Average Rotation Error [deg]')
plt.legend(loc=0)

plt.grid(True)
fig.tight_layout()

plt.savefig('./deepvo-KITTI/rotation-error-per-meter-comparison-Dropout-No-LSTM.pdf', bbox_inches='tight')


if show:
    plt.show()

# Translation (KITTI)

t = np.arange(0, 126, 1)
# Translation incremental
t1 = np.array([0.0, 0.211191, 0.440286, 0.567044, 0.708152, 0.807185, 0.894567, 0.98722, 1.10716, 1.19345, 1.31079, 1.40013, 1.48689, 1.5962, 1.69929, 1.83187, 1.90114, 2.02714, 1.6235, 1.70266, 1.7741, 1.83683, 1.91832, 1.97997, 2.03559, 2.0859, 2.13622, 2.18374, 2.24896, 2.30087, 2.35568, 2.41608, 2.4708, 2.50873, 2.54814, 2.59937, 2.64414, 2.67001, 2.71844, 2.77239, 2.83423, 2.87963, 2.93183, 2.98919, 3.05667, 3.11546, 3.19281, 3.27035, 3.33745, 3.41648, 3.45274, 3.52476, 3.5971, 3.71038, 3.82683, 3.93039, 4.0252, 4.11435, 4.24624, 4.38591, 3.99507, 4.06294, 4.1445, 4.22881, 4.31621, 4.39159, 4.4625, 4.56084, 4.66374, 4.78852, 4.19087, 4.31959, 4.17051, 4.27806, 4.39005, 4.53575, 4.693, 4.81507, 5.39785, 5.19369, 5.2741, 5.09093, 5.18882, 5.2804, 5.40011, 5.51936, 5.65661, 5.7937, 5.89271, 4.39638, 4.54239, 4.62964, 4.80804, 4.94867, 5.03443, 5.10035, 5.22238, 8.46648, 8.46648, 8.65126, 8.84173, 8.84173, 9.01928, 9.19258, 9.19258, 9.36571, 9.53676, 9.53676, 9.71297, 9.8942, 9.8942, 10.0778, 10.266, 10.266, 10.4348, 10.4348, 10.5941, 10.7628, 10.7628, 10.9167, 11.0732, 11.0732, 11.2361, 11.4136, 11.4136, 11.5906])
# Translation incremental dropout
t2 = np.array([0.0, 0.185921, 0.370887, 0.48778, 0.608667, 0.684931, 0.755308, 0.828982, 0.943669, 1.03167, 1.14554, 1.24326, 1.35213, 1.47365, 1.55675, 1.64378, 1.71103, 1.83525, 1.44389, 1.50696, 1.5667, 1.62431, 1.69592, 1.75876, 1.8057, 1.86159, 1.92162, 1.96992, 2.03957, 2.09869, 2.14986, 2.19918, 2.24722, 2.28369, 2.3187, 2.35115, 2.37843, 2.38974, 2.42903, 2.46255, 2.49578, 2.52806, 2.5619, 2.59587, 2.62498, 2.66429, 2.71951, 2.78369, 2.83674, 2.89211, 2.8197, 2.87216, 2.92, 3.01513, 3.12666, 3.23427, 3.33583, 3.42234, 3.55105, 3.66646, 3.13249, 3.16681, 3.22293, 3.28396, 3.33859, 3.39956, 3.47182, 3.55697, 3.65033, 3.74762, 3.22451, 3.33835, 3.68974, 3.76654, 3.84384, 3.95399, 4.0665, 4.17547, 4.48134, 4.4551, 4.5525, 4.59947, 4.72922, 4.90842, 5.04232, 5.21917, 5.37471, 5.52532, 5.66467, 4.29431, 4.4456, 4.54079, 4.73342, 4.87225, 4.96935, 5.05124, 5.17414, 8.32184, 8.32184, 8.46482, 8.61892, 8.61892, 8.77026, 8.90958, 8.90958, 9.05923, 9.19494, 9.19494, 9.34836, 9.50305, 9.50305, 9.66354, 9.81942, 9.81942, 9.96064, 9.96064, 10.102, 10.2384, 10.2384, 10.3514, 10.4739, 10.4739, 10.6014, 10.743, 10.743, 10.8891])
# Translation incremental no LSTM
t3 = np.array([0.0, 0.220017, 0.369055, 0.451439, 0.558296, 0.638942, 0.736999, 0.826626, 0.953309, 1.02795, 1.13209, 1.22668, 1.34744, 1.5024, 1.65838, 1.95152, 2.11732, 2.28761, 1.72071, 1.8131, 1.88509, 1.95207, 2.02703, 2.06746, 2.13953, 2.20248, 2.26633, 2.31983, 2.38688, 2.45193, 2.52384, 2.59093, 2.64708, 2.66776, 2.70127, 2.76684, 2.81099, 2.83503, 2.89034, 2.93991, 3.00274, 3.04017, 3.10412, 3.16256, 3.2285, 3.27346, 3.36385, 3.43091, 3.49466, 3.5647, 3.72201, 3.80054, 3.87797, 4.00684, 4.1016, 4.21973, 4.36836, 4.51721, 4.69107, 4.84537, 4.57177, 4.63313, 4.73054, 4.81994, 4.89834, 4.97694, 5.07489, 5.20394, 5.27071, 5.39835, 4.96126, 5.09377, 4.74585, 4.83621, 4.95191, 5.06983, 5.15428, 5.2127, 5.39041, 4.87363, 4.93455, 4.948, 5.06688, 5.24614, 5.40726, 5.65067, 5.81928, 5.96237, 6.07717, 4.0879, 4.19076, 4.27967, 4.39823, 4.50623, 4.55535, 4.62537, 4.68033, 6.2717, 6.2717, 6.39988, 6.49518, 6.49518, 6.58254, 6.61257, 6.61257, 6.6284, 6.65532, 6.65532, 6.73797, 6.80258, 6.80258, 6.88607, 6.98734, 6.98734, 7.07749, 7.07749, 7.16853, 7.26303, 7.26303, 7.31996, 7.47999, 7.47999, 7.61296, 7.72263, 7.72263, 7.78804])

fig, ax1 = plt.subplots()
ax1.plot(t, t1, 'r', label='No Dropout')
ax1.plot(t, t2, 'g', label='Dropout 0.5')
ax1.plot(t, t3, 'b', label='no LSTM')
ax1.set_xlabel('Distance [m]')
ax1.set_ylabel('Average Translation Error [m]')
plt.legend(loc=0)

plt.grid(True)
fig.tight_layout()

plt.savefig('./deepvo-KITTI/translation-error-per-meter-comparison-Dropout-No-LSTM.pdf', bbox_inches='tight')


if show:
    plt.show()
